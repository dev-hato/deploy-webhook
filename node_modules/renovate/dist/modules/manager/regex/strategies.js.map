{"version":3,"file":"strategies.js","sourceRoot":"","sources":["../../../../lib/modules/manager/regex/strategies.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { regEx } from '../../../util/regex';\nimport type { CustomExtractConfig, PackageDependency } from '../types';\nimport {\n  createDependency,\n  mergeExtractionTemplate,\n  mergeGroups,\n  regexMatchAll,\n} from './utils';\n\nexport function handleAny(\n  content: string,\n  packageFile: string,\n  config: CustomExtractConfig\n): PackageDependency[] {\n  return config.matchStrings\n    .map((matchString) => regEx(matchString, 'g'))\n    .flatMap((regex) => regexMatchAll(regex, content)) // match all regex to content, get all matches, reduce to single array\n    .map((matchResult) =>\n      createDependency(\n        { groups: matchResult.groups ?? {}, replaceString: matchResult[0] },\n        config\n      )\n    )\n    .filter(is.truthy);\n}\n\nexport function handleCombination(\n  content: string,\n  packageFile: string,\n  config: CustomExtractConfig\n): PackageDependency[] {\n  const matches = config.matchStrings\n    .map((matchString) => regEx(matchString, 'g'))\n    .flatMap((regex) => regexMatchAll(regex, content)); // match all regex to content, get all matches, reduce to single array\n\n  if (!matches.length) {\n    return [];\n  }\n\n  const extraction = matches\n    .map((match) => ({\n      groups: match.groups ?? {},\n      replaceString: match?.groups?.currentValue ? match[0] : undefined,\n    }))\n    .reduce((base, addition) => mergeExtractionTemplate(base, addition));\n  return [createDependency(extraction, config)].filter(is.truthy);\n}\n\nexport function handleRecursive(\n  content: string,\n  packageFile: string,\n  config: CustomExtractConfig,\n  index = 0,\n  combinedGroups: Record<string, string> = {}\n): PackageDependency[] {\n  const regexes = config.matchStrings.map((matchString) =>\n    regEx(matchString, 'g')\n  );\n  // abort if we have no matchString anymore\n  if (!regexes[index]) {\n    return [];\n  }\n  return regexMatchAll(regexes[index], content)\n    .flatMap((match) => {\n      // if we have a depName and a currentValue which have the minimal viable definition\n      if (match?.groups?.depName && match?.groups?.currentValue) {\n        return createDependency(\n          {\n            groups: mergeGroups(combinedGroups, match.groups),\n            replaceString: match[0],\n          },\n          config\n        );\n      }\n\n      return handleRecursive(\n        match[0],\n        packageFile,\n        config,\n        index + 1,\n        mergeGroups(combinedGroups, match.groups ?? {})\n      );\n    })\n    .filter(is.truthy);\n}\n"]}