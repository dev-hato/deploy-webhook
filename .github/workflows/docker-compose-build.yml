---
name: docker-compose-build

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - closed

jobs:
  docker-compose-build:
    runs-on: ubuntu-latest
    env:
      DOCKER_BUILDKIT: 1
      COMPOSE_DOCKER_CLI_BUILD: 1
    permissions:
      contents: read
      packages: write
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed' && github.repository == github.event.pull_request.head.repo.full_name)
    steps:
      - uses: actions/checkout@v3.1.0
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      # jscpd:ignore-start
      - run: cat .env.example >>"$GITHUB_ENV"
      - run: echo "TAG_NAME=${HEAD_REF//\//-}" >> "$GITHUB_ENV"
        env:
          HEAD_REF: ${{github.head_ref}}
        if: ${{ github.event_name == 'pull_request' }}
      - run: echo "REPOSITORY=${{github.repository}}" >> "${GITHUB_ENV}"
      # jscpd:ignore-end
      - name: Build and push (develop)
        uses: docker/bake-action@v2.3.0
        env:
          DOCKER_CONTENT_TRUST: 1
        with:
          push: true
          files: docker-compose.yml,dev.docker-compose.yml
      - name: Build and push (production)
        uses: docker/bake-action@v2.3.0
        env:
          DOCKER_CONTENT_TRUST: 1
        with:
          push: true
          files: docker-compose.yml,production.docker-compose.yml

  format-go:
    runs-on: ubuntu-latest
    needs: docker-compose-build
    if: always() && (needs.docker-compose-build.result == 'success' || (github.event_name == 'pull_request' && github.event.action == 'closed'))
    permissions:
      contents: write
      pull-requests: write
    env:
      DOCKER_CONTENT_TRUST: 1
    steps:
      - uses: actions/checkout@v3.1.0
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      - run: cat .env.example >> "$GITHUB_ENV"
      - run: echo "TAG_NAME=${HEAD_REF//\//-}" >> "$GITHUB_ENV"
        env:
          HEAD_REF: ${{github.head_ref}}
        if: github.event_name == 'pull_request'
      - run: echo "REPOSITORY=${{github.repository}}" >> "${GITHUB_ENV}"
      - if: github.event_name != 'pull_request' || github.event.action != 'closed'
        run: docker compose -f docker-compose.yml -f dev.docker-compose.yml pull
      - name: Get Go version
        id: get_go_version
        if: github.event_name != 'pull_request' || github.event.action != 'closed'
        run: |
          CMD="go version | awk '{print \$3}' | sed -e 's/^go//g'"
          go_version=$(docker compose -f docker-compose.yml -f dev.docker-compose.yml run deploy-webhook sh -c "${CMD}")
          echo "Go version:" "${go_version}"
          echo "go_version=${go_version}" >> "${GITHUB_OUTPUT}"
      - name: Set up Go
        uses: actions/setup-go@v3
        if: github.event_name != 'pull_request' || github.event.action != 'closed'
        with:
          go-version: ${{steps.get_go_version.outputs.go_version}}
      - name: Install goimports
        if: github.event_name != 'pull_request' || github.event.action != 'closed'
        run: |
          echo "$(go env GOPATH)/bin" >> "${GITHUB_PATH}"
          go install golang.org/x/tools/cmd/goimports@latest
      - name: Format files
        if: github.event_name != 'pull_request' || github.event.action != 'closed'
        run: |
          go_version="$(go version | awk '{print $3}' | awk -F . 'BEGIN {OFS="."} {print $1,$2}' | sed -e 's/go//g')"
          go mod tidy -go="${go_version}"
          goimports -l -w .
      - uses: dev-hato/actions-diff-pr-management@v1.0.8
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          branch-name-prefix: fix-format
          pr-title-prefix: formatが間違ってたので直してあげたよ！
          repo-name: dev-hato/deploy-webhook

  update-dockle:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3.1.0
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: dev-hato/actions-update-dockle@v0.0.27
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          repo-name: dev-hato/deploy-webhook

  dockle:
    runs-on: ubuntu-latest
    needs:
      - docker-compose-build
      - update-dockle
    strategy:
      matrix:
        docker_compose_file_name: [ "dev.docker-compose.yml", "production.docker-compose.yml" ]
    env:
      DOCKER_CONTENT_TRUST: 1
    steps:
      - uses: actions/checkout@v3.1.0
        # jscpd:ignore-start
      - run: cat .env.example >>"$GITHUB_ENV"
      - run: echo "TAG_NAME=${HEAD_REF//\//-}" >> "$GITHUB_ENV"
        env:
          HEAD_REF: ${{github.head_ref}}
        if: ${{ github.event_name == 'pull_request' }}
      - run: echo "REPOSITORY=${{github.repository}}" >> "${GITHUB_ENV}"
      # jscpd:ignore-end
      - run: |
          dockle_version="$(cat .dockle-version)"
          curl -L -o dockle.deb "https://github.com/goodwithtech/dockle/releases/download/v${dockle_version}/dockle_${dockle_version}_Linux-64bit.deb"
          sudo dpkg -i dockle.deb
      - run: docker compose -f docker-compose.yml -f ${{matrix.docker_compose_file_name}} pull
      - run: docker compose -f docker-compose.yml -f ${{matrix.docker_compose_file_name}} up -d
      - run: |
          for image_name in $(docker compose -f docker-compose.yml -f ${{matrix.docker_compose_file_name}} images | awk 'OFS=":" {print $2,$3}' | tail -n +2); do
            cmd="dockle --exit-code 1 "
            cmd+="${image_name}"
            echo "> ${cmd}"
            eval "${cmd}"
          done

  docker-compose-build-complete:
    runs-on: ubuntu-latest
    needs:
      - format-go
      - dockle
    steps:
      - run: exit 0
